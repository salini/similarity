
set(MACRO_DIR ${CMAKE_SOURCE_DIR}/cmake/macro/)


MACRO(SET_VERSION V_MAJOR V_MINOR V_PATCH)
  string(TOUPPER   ${CMAKE_PROJECT_NAME}   UP_PROJECT_NAME)
  SET(${UP_PROJECT_NAME}_VERSION_MAJOR ${V_MAJOR})
  SET(${UP_PROJECT_NAME}_VERSION_MINOR ${V_MINOR})
  SET(${UP_PROJECT_NAME}_VERSION_PATCH ${V_PATCH})
  SET(PROJECT_VERSION "${V_MAJOR}.${V_MINOR}.${V_PATCH}")
ENDMACRO()



MACRO(ADD_ALL_SUBDIRECTORIES)
	# add all sub directories
	FILE(GLOB CHILDREN  * )
	FOREACH(CHILD ${CHILDREN})
		IF(IS_DIRECTORY ${CHILD})
			add_subdirectory(${CHILD})
		ENDIF()
	ENDFOREACH()
ENDMACRO()


MACRO(ADD_VERSION_HEADER_FILE)
  configure_file(${MACRO_DIR}/Version.h.in   ${CMAKE_CURRENT_SOURCE_DIR}/Version.h)
ENDMACRO()


MACRO(SET_CMAKE_RUNTIME_OUTPUT_DIRECTORIES)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE          ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO   ${CMAKE_BINARY_DIR}/bin_rd)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG            ${CMAKE_BINARY_DIR}/bin_d)
set(CMAKE_DEBUG_POSTFIX "_d")
ENDMACRO()



MACRO(SET_BUILD_DYNAMIC_OPTION   __PREPROCESSOR_DYN_DEFINITION_NAME)
option(BUILD_DYNAMIC_LIBRARIES "Set to ON to build project for dynamic linking. Use OFF for static." ON)
set(PREPROCESSOR_DYN_DEFINITION_NAME  ${__PREPROCESSOR_DYN_DEFINITION_NAME})
if(BUILD_DYNAMIC_LIBRARIES)
    set(BUILD_SHARED_LIBS TRUE)
    add_definitions(-D${PREPROCESSOR_DYN_DEFINITION_NAME})
else()
    set(BUILD_SHARED_LIBS FALSE)
endif()
ENDMACRO()



MACRO(CONFIGURE_LIBRARY_GENERAL_HEADER   LIB_NAME   LIB_H_FILES)

    set(LIB_ALL_HEADERS_INCLUDE_STRING)
    foreach(FULLPATH_HEADER_NAME   ${${LIB_H_FILES}})
        GET_FILENAME_COMPONENT(HEADER_NAME ${FULLPATH_HEADER_NAME} NAME)
        if(NOT ${HEADER_NAME} STREQUAL "DllExport.h")
            set(LIB_ALL_HEADERS_INCLUDE_STRING "${LIB_ALL_HEADERS_INCLUDE_STRING}#include \"${LIB_NAME}/${HEADER_NAME}\"\n")
        endif()
    endforeach()
    
    configure_file(${MACRO_DIR}/GenericLibraryHeader.h.in   ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h   @ONLY)
    
    set(DLL_EXPORT_PREPROCESSOR_DYN_DEFINITION_NAME ${PREPROCESSOR_DYN_DEFINITION_NAME})
    set(DLLEXPORT_LIB_NAME ${LIB_NAME})
    string(TOUPPER   ${DLLEXPORT_LIB_NAME}   DLLEXPORT_LIB_NAME_CAPITAL)
  
    configure_file(${MACRO_DIR}/DllExport.h.in   ${CMAKE_CURRENT_SOURCE_DIR}/DllExport.h   @ONLY)
  
    LIST(APPEND   ${LIB_H_FILES}   ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h   ${CMAKE_CURRENT_SOURCE_DIR}/DllExport.h)
    
    INSTALL( FILES      ${CMAKE_BINARY_DIR}/include/${LIB_NAME}.h
        DESTINATION     include
        COMPONENT       headers
    )
ENDMACRO()





MACRO(ADD_STATIC_POSTFIX_IF_NEEDED   LIB_NAME)
    if(NOT BUILD_SHARED_LIBS)
        set_target_properties(${LIB_NAME}  PROPERTIES  OUTPUT_NAME  "${LIB_NAME}_s")
    endif()
ENDMACRO()



MACRO(SETUP_LIBRARY   LIB_NAME   LIB_H_FILES   LIB_CPP_FILES)

    CONFIGURE_LIBRARY_GENERAL_HEADER(${LIB_NAME}   ${LIB_H_FILES})
    
    ADD_LIBRARY( ${LIB_NAME}
        ${${LIB_H_FILES}}
        ${${LIB_CPP_FILES}}
    )
    
    ADD_STATIC_POSTFIX_IF_NEEDED(${LIB_NAME})
    
    INSTALL_LIBRARY(${LIB_NAME}   ${LIB_H_FILES})
ENDMACRO()



MACRO(SETUP_ALL_EXAMPLES_AND_OPTIONS   EXAMPLES_FILES   EXAMPLES_DEPENDENCIES   STATUS_OPTION_AT_START)

    get_filename_component(CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)

    ##### TEST IF EXAMPLES SHOULD BE GENERATED
    SET(BUILD_EXAMPLES_${CURRENT_DIR_NAME} ${STATUS_OPTION_AT_START} CACHE BOOL "Toggle examples generation of folder ${CURRENT_DIR_NAME}")
    mark_as_advanced(BUILD_EXAMPLES_${CURRENT_DIR_NAME})
    if (NOT BUILD_EXAMPLES_${CURRENT_DIR_NAME})
        return()
    endif()

    FOREACH(EXAMPLE_CPP  ${${EXAMPLES_FILES}})

        GET_FILENAME_COMPONENT(EXAMPLE_NAME ${EXAMPLE_CPP} NAME_WE)
        ADD_EXECUTABLE( ${EXAMPLE_NAME}
            ${EXAMPLE_CPP}
        )

        TARGET_LINK_LIBRARIES( ${EXAMPLE_NAME}
            ${${EXAMPLES_DEPENDENCIES}}
        )

    ENDFOREACH()
    
ENDMACRO()



MACRO(SETUP_ALL_EXAMPLES   EXAMPLES_FILES   EXAMPLES_DEPENDENCIES)

  SETUP_ALL_EXAMPLES_AND_OPTIONS(${EXAMPLES_FILES}   ${EXAMPLES_DEPENDENCIES}   ON)

ENDMACRO()



include(macroInstall)
